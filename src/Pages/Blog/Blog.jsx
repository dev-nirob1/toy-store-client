import useTitle from "../../Hooks/useTitle";

const Blog = () => {
    useTitle('Blogs')
    return (
        <div className="container mx-auto my-10 pb-10">
            <h2 className="text-center pb-10 font-semibold text-5xl">Recent Blogs</h2>
            <div className="space-y-5">
                <div className="p-5 bg-gray-50 shadow-xl">
                    <h4 className="text-2xl text-gray-800 font-semibold mb-2">What is Express.js and what is Nest.js? </h4>
                    <p className="text-lg text-gray-600 font-medium mb-5"><span className="text-blue-500 underline">Express.js: </span> Express.js, commonly referred to as Express, is a popular web application framework for Node.js, a server-side JavaScript runtime. Express.js simplifies the process of building web applications and APIs by providing a set of robust and flexible features and middleware that handle various aspects of web development. Express.js is widely used in the Node.js ecosystem and is a popular choice for building web applications and APIs due to its simplicity, performance, and strong community support. It`s particularly well-suited for building RESTful APIs and single-page applications (SPAs).
                    </p>
                    <p className="text-lg text-gray-600 font-medium"><span className="text-blue-500 underline">Nest.js: </span>NestJS is a popular open-source web framework for building server-side applications using Node.js. It is designed to help developers create scalable and maintainable applications by providing a well-organized structure and a range of tools and features. NestJS is often used for building web APIs, microservices, and full-stack applications. NestJS has gained popularity for its developer-friendly features, strong TypeScript support, and the ability to create scalable and maintainable applications. It is often used in combination with popular front-end frameworks like Angular for building full-stack applications. Additionally, NestJS has a vibrant community and a growing ecosystem of plugins and extensions to enhance its capabilities.</p>
                </div>
                <div className="p-5 bg-gray-50 shadow-xl">
                    <h4 className="text-2xl text-gray-800 font-semibold mb-2">What is Mongodb aggregate and how does it works? </h4>
                    <p className="text-lg text-gray-600 font-medium mb-5"> Aggregation is a way of processing a large number of documents in a collection by means of passing them through different stages. The stages make up what is known as a pipeline. The stages in a pipeline can filter, sort, group, reshape and modify documents that pass through the pipeline. Aggregations are structured as a sequence of pipeline stages, with each stage performing a specific operation on the data. The stages are executed in order, and the output of one stage serves as the input for the next stage. The input data for the aggregation pipeline is typically a collection in your MongoDB database. You can specify the collection as the starting point for your aggregation.  Each stage in the pipeline consists of one or more operators, which perform operations on the data.  The final stage of the pipeline typically produces the aggregated results in the desired format. You can specify the structure of the output, such as grouping results, projecting specific fields, or including computed values. MongoDB`s aggregation framework is flexible and capable of handling complex data transformations and analytics tasks. It is a valuable tool for performing data analysis within the database, reducing the need to transfer large datasets to external processing tools.
                    </p>

                </div>
                <div className="p-5 bg-gray-50 shadow-xl">
                    <h4 className="text-2xl text-gray-800 font-semibold mb-2">What is Access token and what is refresh token? How does it works? </h4>
                    <p className="text-lg text-gray-600 font-medium mb-5"><span className="text-blue-500 font-bold underline">Access Token: </span>An access token is a security credential that is used to authenticate and authorize a user or an application to access a specific set of resources or perform certain actions on a system or service. Access tokens are commonly used in various authentication and authorization mechanisms, including web applications, APIs (Application Programming Interfaces), and OAuth (Open Authorization) systems.</p>
                    <p className="text-lg mt-5 text-gray-600 font-medium"> <span className="text-blue-500 font-bold underline">How Access Token Works: </span> When a user or application logs in or requests access to a protected resource, they typically need to provide some form of authentication, such as a username and password or other credentials.Once authentication is successful, the system or service determines what actions or resources the authenticated entity is allowed to access. Access control mechanisms define who can access what resources and what operations they can perform. Access tokens play a crucial role in enforcing access control policies. Instead of repeatedly sending the username and password with each request. These tokens are typically short-lived.The authenticated user or application includes the access token in each request to the system or service. The service then validates the token to determine if the requester is authorized to access the requested resource or perform the requested action. After the token expires, the user or application must re-authenticate to obtain a new token. Access tokens may contain information about the specific permissions or scopes associated with the token, indicating what actions or resources are allowed. Therefore, it is essential to protect access tokens from unauthorized access, such as by using secure communication (HTTPS) and storing tokens securely.OAuth is a widely used protocol for obtaining access tokens and delegating authorization. It allows applications to request access on behalf of a user without exposing the user`s credentials.
                    </p>
                    <p className="text-lg mt-5 text-gray-600 font-medium"><span className="text-blue-500 underline">Refresh Token: </span>A refresh token is a security credential used in the context of token-based authentication systems, such as OAuth 2.0, to obtain a new access token without requiring the user or application to re-enter their credentials (e.g., username and password). Refresh tokens are primarily used to extend the validity of an access token, enhancing security and user experience in authentication scenarios. How is refresh token generated?
                        Refresh tokens are generated by the authorization server at the same time that access tokens are issued. When a user logs in to the application, the following sequence is initiated between the user, authorization serve, and resource server: The user successfully completes the authorization process.</p>
                </div>
                <div className="p-5 bg-gray-50 shadow-xl">
                    <h4 className="text-2xl text-gray-800 font-semibold mb-2">Comparison SQL and NOSQL databases : </h4>
                    <p className="text-lg text-gray-600 font-medium mb-5"><span className="text-blue-500 underline">SQL: </span> SQL databases are relational databases that use a structured and tabular data model. They organize data into tables with rows and columns, enforcing a predefined schema. SQL databases have a rigid schema that defines the structure of the data, including data types and relationships. Any changes to the schema require altering the table, which can be a complex and time-consuming process. SQL databases use SQL as their query language, which is a powerful and standardized language for querying and manipulating structured data. SQL databases are well-suited for applications with complex queries, structured data, and strict data integrity requirements. Examples include financial systems, e-commerce platforms, and enterprise applications.
                    </p>
                    <p className="text-lg text-gray-600 font-medium"><span className="text-blue-500 underline">NoSQL: </span>NoSQL databases are non-relational and provide a flexible data model. They can handle semi-structured, unstructured, or hierarchical data, allowing for more dynamic and scalable data storage. NoSQL databases are typically schema-less or have a dynamic schema, allowing you to add or remove fields without affecting existing data. This flexibility is well-suited for evolving data requirements. NoSQL databases use various query languages or APIs specific to their data model. The query languages may not be as standardized as SQL. NoSQL databases are ideal for applications that deal with large amounts of unstructured or semi-structured data, real-time data processing, and horizontal scalability. Examples include social media, IoT, and content management systems.</p>
                </div>
            </div>

        </div>
    );
};

export default Blog;